type Order
  @model
  @searchable
  @auth(rules: [
  { allow: owner , provider: userPools },
  { allow: owner , ownerField: "solver", operations: [update, read]}

  ])
  {
  id: ID!
  subject: String!
  option1: Boolean! # 새로운풀이
  option2: Boolean! # 상세풀이
  option3: Boolean! # 영어풀이
  username: String!
  deadline: AWSDateTime!
  state: State!
  pay: Int
  problems: [Problem] @connection(name: "OrderProblems")
  message: Message
  createdAt: AWSDateTime!
  solver: String
}

type Review
  @model
  @searchable
  @auth(rules: [{ allow: public }])
  {
  username: String!
  subject: String!
  rating: Float
  review: String
  order: String!
  createdAt: AWSDateTime!
}

type Problem @model @auth(rules: [{ allow: owner, provider: userPools}]){
  id: ID!
  subject: Subject!
  image: String
  description: String
  order: Order @connection(name: "OrderProblems")
  answers: [Answer] @connection(name: "ProblemAnswers")
  createdAt: AWSDateTime!
}

type Answer @model @auth(rules: [{ allow: owner , provider: userPools}]){
  id: ID!
  image: String
  description: String
  problem: Problem @connection(name: "ProblemAnswers")
}

enum State {
  payWaiting # 결제대기
  priceWaiting #금액책정대기
  canceledWaiting # 풀이취소대기
  canceled # 풀이취소
  assignWaiting # 풀이자배정대기
  solveWaiting # 문제풀이대기
  solving # 문제풀이중
  mentoring # 멘토링중
  finished # 완료
}

enum Subject {
  classicalMechanics # 고전역학
  electromagnetism # 전자기학
  thermodynamics # 열역학
  linearAlgebra # 선형대수학
  calculus # 미적분학
  engineeringMathematics # 공업수학
  chemistry # 일반화학
  organicChemistry # 유기화학
}

type Message
  @model
  @key(name: "byChannelID", fields: ["channelID", "createdAt"], queryField: "messagesByChannelID") {
  id: ID!
  channelID: ID!
  author: String!
  body: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
